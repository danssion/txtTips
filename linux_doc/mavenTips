########## 0. maven install ##########
#download from http://maven.apache.org/
#add env
M2_HOME = D:/tool/maven
MAVEN_OPTS = -Xms128m -Xmx512m
  
########## 1.0 maven project  Interactive Mode（交互模式） ##########
mvn archetype:generate
项目 Archetype Version（原型版本号）是什么？—— 可选择 1.0 版本
项目 groupId（组织名） 是什么？—— 可输入 com.smart
项目 artifactId（构件名）是什么？—— 可输入 smart-demo
项目 version（版本号）是什么？—— 可输入 1.0
项目 package（包名）是什么？—— 可输入 com.smart.demo
我们的目标是创建 Java Web 项目，所以您可以选择 maven-archetype-webapp（可以在 cmd 中进行模糊搜索）
  
########## 1.1 maven project Batch Mode（批处理模式） ##########
mvn archetype:generate -DinteractiveMode=false -DarchetypeArtifactId=maven-archetype-webapp -DgroupId=com.smart -DartifactId=smart-demo -Dversion=1.0
  
########## 1.2 目录结构 ##########
main 目录下是项目的主要代码，test 目录下存放测试相关的代码
编译输出target 目录下（该目录与 src 目录在同一级别下)
java 目录下存放 Java 代码，resources 目录下存放配置文件。
webapp 目录下存放 Web 应用相关代码
pom.xml 是 Maven 项目的配置文件。
pom.xml 称为 Project Object Model（项目对象模型），它用于描述整个 Maven 项目，所以也称为 Maven 描述文件
  
########## 1.3 pom.xml base ##########
modelVersion：这个是 POM 的版本号，现在都是 4.0.0 的，必须得有，但不需要修改。
groupId、artifactId、version：分别表示 Maven 项目的组织名、构件名、版本号，它们三个合起来就是 Maven 坐标，根据这个坐标可以在 Maven 仓库中对应唯一的 Maven 构件。
packaging：表示该项目的打包方式，war 表示打包为 war 文件，默认为 jar，表示打包为 jar 文件。
name、url：表示该项目的名称与 URL 地址，意义不大，可以省略。
dependencies：定义该项目的依赖关系，其中每一个 dependency 对应一个 Maven 项目，可见 Maven 坐标再次出现，还多了一个 scope，表示作用域（下面会描述）。
build：表示与构建相关的配置，这里的 finalName 表示最终构建后的名称 smart-demo.war，这里的 finalName 还可以使用另一种方式来定义（下面会描述）。
  
########## 1.3 pom.xml other ##########
Lifecycle（生命周期）
阶段            插件                              作用
clean          clean                              清理自动生成的文件，也就是 target 目录
validate       由 Maven 核心负责                  验证 Maven 描述文件是否有效
compile        compiler、resources                编译 Java 源码
test           compiler、surefire、resources      运行测试代码
package        war                                项目打包，就是生成构件包，也就是打 war 包
verify         由 Maven 核心负责                  验证构件包是否有效
install        install                            将构件包安装到本地仓库
site           site                               生成项目站点，就是一堆静态网页文件，包括 JavaDoc
deploy         deploy                             将构件包部署到远程仓库
(上是插件的别名（或称为前缀），比如：compiler 实际上是 org.apache.maven.plugins:maven-compiler-plugin:2.3.2，这个才是 Maven 插件的完全名称)
  
Plugins（插件）
每个插件又包括了一些列的 Goal（目标），以 compiler 插件为例
compiler:help：用于显示 compiler 插件的使用帮助。
compiler:compile：用于编译 main 目录下的 Java 代码。
compiler:testCompile：用于编译 test 目录下的 Java 代码。
作用域
作用域  编译时有效  测试时有效  运行时有效         示例
compile     √           √           √         smart-framework.jar
test                    √                         junit.jar
runtime                 √           √         mysql-connector-java.jar
provided    √           √                       servlet-api.jar
system      √           √                         JDK 的 rt.jar  
  
Dependencies（依赖）
   
  
########## 2.0 Maven 命令 ##########
mvn <插件>:<目标> [参数]
mvn <阶段>
mvn clean：清空输出目录（即 target 目录）
mvn compile：编译源代码
mvn package：生成构件包（一般为 jar 包或 war 包）
mvn install：将构件包安装到本地仓库
mvn deploy：将构件包部署到远程仓库
执行 Maven 命令需要注意的是：必须在 Maven 项目的根目录处执行，也就是当前目录下一定存在一个名为 pom.xml 的文件。
 
from : http://my.oschina.net/huangyong/blog/194583


########## 2.1 Eclipse run Maven ##########
package -P dev
其中“dev“为环境的变量id, 可以自己定义， 我定义的名称为：dev,qa,pre,prod , 具体在pom.xml中的配置如下：
<profile>  
  <id>qa</id>  
  <properties>  
  <env>qa</env>  
  </properties>  
</profile>  
  
1.profiles定义了各个环境的变量id
2.filters中定义了变量配置文件的地址，其中地址中的环境变量就是上面profile中定义的值
3.resources中是定义哪些目录下的文件会被配置文件中定义的变量替换，一般我们会把项目的配置文件放在src/main/resources下，像db,bean等，里面用到的变量在打包时就会根据filter中的变量配置替换成固定值
  
########## 3.0 使用 OSC Maven 仓库 ##########
1.下载maven
2.安装maven
3.配置环境变量
4.测试安装
mvn -version 
  
########## 3.1 基础配置 ##########
全局配置：%M2_HOME%\conf\settings.xml
用户配置：用户目录\.m2\settings.xml
<mirrors>
...
        <mirror>
            <id>osc</id>
            <mirrorOf>*</mirrorOf>
            <url>http://maven.oschina.net/content/groups/public/</url>
        </mirror>
...
</mirrors>

配置 OSC Maven 仓库

返回博客列表
原 荐 使用 OSC Maven 仓库
黄勇  黄勇
发布时间: 2013/11/29 16:00 阅读: 11604 收藏: 136 点赞: 25 评论: 17
欢迎使用 OSC Maven 仓库： maven.oschina.net
1 安装

1.1 下载 Maven

下载 Maven 程序包，下载地址：http://maven.apache.org/download.cgi

1.2 安装 Maven

解压已下载的 Maven 程序包，到本地磁盘（如：D:\SDK\Maven）。

1.3 配置环境变量

设置以下环境变量：

M2_HOME = D:\SDK\Maven

PATH = ...;%M2_HOME%\bin

1.4 测试安装

可使用 mvn -version 命令查看已安装的 Maven 版本号。

2 基础配置

修改 Maven 配置文件（setting.xml），可修改全局配置或用户配置：

全局配置：%M2_HOME%\conf\settings.xml
用户配置：用户目录\.m2\settings.xml
  
配置 OSC Maven 镜像
<mirrors>
...
        <mirror>
            <id>osc</id>
            <mirrorOf>*</mirrorOf>
            <url>http://maven.oschina.net/content/groups/public/</url>
        </mirror>
...
</mirrors>
  
配置 OSC Maven 仓库
<profiles>
...
        <profile>
            <id>osc</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <repositories>
                <repository>
                    <id>osc</id>
                    <url>http://maven.oschina.net/content/groups/public/</url>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>osc</id>
                    <url>http://maven.oschina.net/content/groups/public/</url>
                </pluginRepository>
            </pluginRepositories>
        </profile>
...
</profiles>
  
########## 3 more ##########
 from : http://my.oschina.net/huangyong/blog/180189 
  

