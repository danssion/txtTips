[[[ grep ]]]
egrep -ril '<?php ' ./includes/languages/*/html_includes | egrep -e "\.php$" | wc -l 
grep -r --exclude="*.svn*" "\<echo\>" *  | awk -F":" '{print $1}' | awk -F"-" '{print$1}' | sort -rn | wc -l
./assistantShell.sh -i error | awk 'FS=" " {print $1; sum+=$1} END {print sum} '
 head -n 20000000 2015081400.log | grep "\"plt\":\"0\"" | grep "\"type\":\"A\"" | awk -F "\"posi\":" '{print $2}' | awk -F "," '{print $1}' | sort | uniq -c
./assistantShell.sh -i error | gawk -mf 3000000 'FS=" " {print $1; sum+=$1} END {print sum} '
sshfs -o idmap=user,umask=0000,uid=1000,gid=1000 duanxiang@192.168.12.185:/home/duanxiang/codes -p 25552 /home/danssion/server-dir
fusermount -u /home/danssion/server-dir/
#500 url
cat nginx-ad-access.log | awk '{if($9=="500") print $0}' | awk '{split($7,b,"?");COUNT[b[1]]++;}END{for(a in COUNT) print  COUNT[a], a}'|sort -k 1 -nr | head -n10
#nginx http code
awk '{counts[$(9)]+=1}; END {for(code in counts) print code, counts[code]}' | sort -k 2 -nr
#统计服务器并发量
cat nginx-ad-access.log |grep '10.15.19.138'| awk '{COUNT[$4]++}END{for( a in COUNT) print a,COUNT[a]}'|sort -k 2 -nr|head -n20
#替换文件中字符串
grep -rl matchstring somedir/ | xargs sed -i 's/string1/string2/g'  
grep -rl '/data/lanxi/public' Back/ | xargs sed -i 's/\/data\/lanxi\/public//g'
#mac
grep -rl "str1" dir | xargs sed -i "" 's/str2/str3/g' 



sudo iptables -I RH-Firewall-1-INPUT 27 -p tcp -m state --state NEW --dport 8885 -j ACCEPT

scp -P 25552 newcart@192.168.12.54:/home/newcart/newcart/litb_online/includes/templates/dev_v2/flash/tpl_categories_menu_de.html ./includes/templates/dev_v2/flash/

sudo mount //192.168.12.5/litb-writable ./share-server/ -t smbfs -o auto,iocharset=utf8
sudo mount //192.168.12.5/litb-readonly ./share-server/ -t cifs -o auto,iocharset=utf8

sudo apt-get install sshfs
sshfs yourname@remote-host:/path/to/your/dir ~/ssh-server

export LANG=zh_CN.UTF-8
setenv LANG zh_CN.UTF-8

/etc/init.d/networking

svn propset svn:keywords "Date Author Revision Id" protected/controllers/

[[[ iconv ]]]
iconv -t utf-8 -f gb2312 -c test.xml > text_UTF8.xml
批量转换
find folder -type d -exec mkdir -p utf/{} \;
find floder -type f -exec iconv -f GB2312 -t UTF-8 {} -o utf/{} \;


[[[ 7z ]]]
7za x phpMyAdmin-3.3.8.1-all-languages.7z -r -o./
-o后是没有空格的，直接接目录。这一点需要注意。
7za a -t7z -mx=8 -r Mytest.7z /opt/phpMyAdmin-3.3.8.1-all-languages/*
a  代表添加文件／文件夹到压缩包
-t 是指定压缩类型，这里定为7z，可不指定，因为7za默认压缩类型就是7z。
-r 表示递归所有的子文件夹
-mx level of compression = 9 (Ultra)


[[[ salt ]]]
salt -E 'web+' test.ping //正则匹配
salt -L 'web1,web2,web3' test.ping
salt -G 'os:CentOS' test.ping
salt -L 'web1,web2,web3' cmd.run 'hostname'


[[[ tar ]]]
tar xvf abc.tar -C ./abc/
tar czvf stuff --exclude=danssion/*
tar -zcvf - stuff --exclude=danssion/.cache | openssl des3 -salt -k tardepassword | dd of=stuff.des3
dd if=stuff.des3 | openssl des3 -d -k tardepassword | tar zxf -


[[[ find ]]]
//在系统根目录下，查找文件为普通文件，属于student用户的，2天以前的，并且查找时不包含/usr/bin目录的文件名为main.c的文件，并将结果输出到屏幕, 对上例中搜索的结果进行删除操作：
find / -path "/usr/bin" -prune -o -name "main.c" -user student -type f -mtime +2 -print -exec rm {} \;
find -name "*.php" | grep -E "(\.\/module|\.\/externals\/common\/module).*" | xargs ls -aSl
find . -user root -o -path "*.svn*" -prune| xargs sudo chown danssion:danssion
find . -path "*.svn*" -prune -o  -user root | egrep "[^s][^n]{1,1}$" | xargs sudo chown danssion:danssion
find . -type f -name "*.txt" | xargs -I {} cp {}  /tmp/n/
find ./output9/ -name "part*" | xargs -i  cat >> ./output9/part-all
find ./ -depth -name '*.php' | grep -E "^./[a-z]{4,}" | xargs grep -El '*meta_tags_products_description
find -name "x11-common*" | xargs -I{} cp -a {} [dir]


[[[ system info ]]]
pkg_info | grep ***
dmesg | grep -i CPU
sysctl -a | grep -i cpu
sysctl -a | grep -i memory
Graphics Card info:
1.lspci  2.modinfo  3.lsmod  4.hwbrowser  5.dmidecode，从bios中读取信息
6、lspci |grep VGA 7、如果是nvdia的话，可以试试glxinfo
centerOS:
lsb_release -a
cat /etc/redhat-release
rpm -q centos-release
file /sbin/init
uname -a || cat /etc/issue  ||   lsb_release -a   ||   cat /etc/redhat-release(针对redhat，Fedora)
sar -n DEV 1 | 进程队列 -q | -W 系统交互信息 | -B 内存分页监控 | -r 内存和交换空间监控 | -b I/O和传送速率监控 
怀疑CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看
怀疑内存存在瓶颈，可用 sar -B、sar -r 和 sar -W 等来查看
怀疑I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看

[[[ system load info ]]]
uptime -> dmesg | tail -> vmstat 1 -> mpstat -P ALL 1 -> pidstat 1 -> iostat -xz 1 -> free -m ->  sar -n DEV 1 -> sar -n TCP,ETCP 1


[[[ freeBSD install ]]]
install php5-extensions
FreeBSD# cd /usr/ports/lang/php5-extensions/
FreeBSD# make config
FreeBSD# make BATCH=yes install
FreeBSD# make install clean
FreeBSD# make clean
FreeBSD# rehash
freebsd# cat /var/run/dmesg.boot |grep CPU
cd /usr/ports/misc/cpuid
make install clean

pecl install pecl_http
source ~/.bashrc


[[[ log shell ]]]
head access_7k7kflash.log -n 10 | awk '$2!="" { printf "%15s %s %20s %s request:%s state:%s refer:%s \n",$1,"\t",$4,$5,$7,$9,$11}' | sed G

head access_1.log -n 10 | sed 's/\[//g' | sed 's/\]//g' | awk '{if ($7!~/(mp3|swf)$/) printf  "%s\t%s\t%s\tstatus:%s\tsize:%s\n",$1,$4,$7,$9,$10 }'

ls /data/disk/dx/search/data/*.log |xargs -n 1 grep 'record user action' |awk '{print $(NF-2), $(NF-1), $NF}'
xargs -P 4 -n 10
find /data/disk/dx -maxdepth 1 -type f | xargs -P 5 -n 1 /home/dx/git_c++/dataPush/pushMysql >> /home/dx/git_c++/dataPush/pushMysql.log

free -g
To free pagecache, use echo 1 > /proc/sys/vm/drop_caches
free dentries and inodes 2 ; free pagecache, dentries and inodes

date -d "@1321884905" +%Y-%m-%d

[[[ dpkg ]]]
*** 包管理
    dpkp
    dpkg-query
    -l
    -s 输出包的状态
    -L 列出一个包的所有文件
    -S 列出一个文件属于哪个包
    -p 打印包的信息

    **** 查找某个包
    apt-cache search pkg-name

dpkg -l
dpkg-query -L
rpm -ql 


[[[ git ]]]
git init --bare game_data_mining
git rm --cache 
git branch [-a]
git config --global user.email "danssion@sina.com"
git diff (--cached)
git add/stage
git commit -m ""
git commit -am ""
git show [branch name] [HEAD]
git tag [tag name] [commit hash]
git grep
git remote add origin git@github.com:github用户名/Helloworld.git 
git push -u origin master
git checkout -b serverfix origin/serverfix
git archive --format zip --output "./output.zip" master -0
git archive --format=tar --prefix=git-1.4.0/ v1.4.0^{tree} | gzip >git-1.4.0.tar.gz
git archive --format=tar --prefix=eating/ HEAD:eating | gzip > git-head.tar.gz
git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ && tar xf -)
git reset <==> git stage
git diff /  git diff --staged / git diff HEAD
# Create a tar archive that contains the contents of the latest commit on the current branch, and extract it in the /var/tmp/junk directory
//for github
git clone 
git remote add upstrean
git remote show upstrean
git fetch upstrean 
git merge upstrean/master
//for git useful
git branch -m master part2 # 重命名 "master" 分支到 "part2"
git checkout SHA1 -b master 
git config --global user.name "duanxiang"
git config --global user.email "duanxiang@allydata.cn"
//example
mkdir ad-show
cd ad-show
[gitlab]
//Git global setup
git config --global user.name "duanxiang"
git config --global user.email "duanxiang@aspiration-cn.com"
//Existing folder
cd existing_folder
git init
git remote add origin git@gitlab.aspiration-ad.com:duanxiang/Dipper.git
git add .
git commit
git push -u origin master
//new 
git clone git@gitlab.aspiration-ad.com:duanxiang/Dipper.git
cd Dipper
touch README.md
git add README.md
git commit -m "first commit"
git push -u origin master
//Existing Git repository
cd existing_repo
git remote add origin git@boom.qctt.cn:duanxiang/ad-show.git
git push -u origin master
git push -u origin --all
git push -u origin --tags




[[[ mysql ]]]
service mysqld [start][restart][stop]
/etc/inint.d/mysqld [start][restart][stop]
safe_mysqld&
bin/mysqld_safe --user=mysql &
mysqladmin shutdown
SET PASSWORD FOR root=PASSWORD('new_password');
UPDATE mysql.user SET authentication_string = PASSWORD('MyNewPass'), password_expired = 'N' WHERE User = 'root' AND Host = 'localhost'; 
mysqladmin -uroot -p password '你的新密码' 
mysqlslap --defaults-file=/opt/modules/mysql/my.cnf --concurrency=50,100 --iterations=1 --auto-generate-sql --auto-generate-sql-load-type=write --engine=innodb --number-of-queries=200 -S/tmp/mysql.sock
mysqladmin -u root -pqcttH1124 processlist | grep zhuxiangyi | awk -F "|" '{print $2}' | xargs -n 1 mysqladmin -u root -pqcttH1124 kill
mysqladmin -u root -pqcttH1124 processlist | grep 'select ' | awk -F "|" '{print $2}'
mysqladmin -u mysql_root -pqCtT@1!2$ processlist | grep 'select ' | awk -F "|" '{print $2}'
set global wait_timeout=10;
show global variables like'wait_timeout';
show create table **** //show partition information
explain partitions select语句 通过此语句来显示扫描哪些分区，及他们是如何使用的
show slave/master status\G;
start slave与stop slave来开启和关闭同步。
CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000030', MASTER_LOG_POS=120;
max_user_connections  max_connections
set global general_log = on; 查看查询日志
show variables like '%general%';     
mysqldump -uroot -pdbpasswd -d dbname test>table-struct.sql;
mysqldump -uroot -pdbpasswd  dbname test>table.sql;
mysqldump　-t　数据库名　-uroot　-p　>data.sql　
mysqldump　-t　数据库名　-uroot　-p | gzip > db_data.sql.gz
gunzip < test.sql.gz | mysql -hlocalhost -uroot -pxxxxx
mysqldump -uroot -p1234 dbname a –where “tag='88′” –no-create-info> c:\a.sql
mysql -e "select * from myTable" -u myuser -pxxxxxxxx mydatabase > mydumpfile.txt
[mysql yum install]
yum list installed mysql*
yum install mysql-community-server.x86_64
mysql_install_db --defaults-file=/etc/my.cnf --user=mysql
systemctl start mysqld
/usr/bin/mysqladmin -u root password

[[[ systemctl ]]]
systemctl enable ***.service
systemctl disable ***.service
systemctl start/stop/restart ***.service
systemctl status ***.service
systemctl -t service
systemctl -a
列出加载的units/sockets/timers
systemctl list-units [pattern]
systemctl list-sockets [pattern]
systemctl list-timers [pattern]
systemctl cat sshd.service
systemctl list-dependencies sshd.service
systemctl show-environment
systemd-cgls以树形列出正在运行的进程，它可以递归显示控制组内容
获取当前某个服务的CPU分配额（如httpd）
systemctl show -p CPUShares httpd.service
systemctl set-property httpd.service CPUShares=2000
检查某个服务的所有配置细节
systemctl show httpd
分析某个服务（httpd）的关键链
systemd-analyze critical-chain httpd.service
获取某个服务（httpd）的依赖性列表
# systemctl list-dependencies httpd.service
按等级列出控制组
# systemd-cgls
按CPU、内存、输入和输出列出控制组
# systemd-cgtop
#systemctl服务主体存贮目录：
/usr/lib/systemd/system/
#systemctl服务开机启动链接存贮目录：
/etc/systemd/system/basic.target.wants/
#列出所有开机自启的服务
systemctl list-unit-files|grep enabled
#列出防火墙服务的自启状态
systemctl list-unit-files|grep firewalld
#列出所有服务的层级和依赖关系，可以指定某个服务
systemctl list-dependencies [服务名称]
systemctl list-unit-files 列出所有可用的Unit
systemctl list-units 列出所有正在运行的Unit
systemctl --failed 列出所有失败单元
systemctl mask httpd.service 禁用服务
systemctl unmask httpd.service
systemctl kill httpd 杀死服务
systemd-analyze critical-chain：分析启动时的关键链
systemd-analyze blame 分析启动时各个进程花费的时间







[[[ vim ]]]
快捷键------------------------------------
word: w,e,b W,E,B,gU,gu
line: 0,^,$,g_,[N]G,gg,G
char: f,t,F,T,%[([{],*,#
select: v[ia][wWsp"')]}] , [v,V,<C-v>] [J <> =]
Vim-ctags--------------------------------
ctags -R -o ~/.vim/ctags/pythontags /somepythondir/
set tags=/home/xxx/xx/tags, xxxx/tags,......
vim -t class | method | variable
:ta tagname 跳转到标签tagname定义的地方
:stag tagname 在分割窗口中查看包含tagname的文件
:tags 查看到达当前位置所经过的标签路径

:tf 跳转至第一个匹配的标签
:tl 跳转至最后一个匹配的标签
ctrl-] ：跳转至光标所在对象定义之处
ctrl-t ：返回跳转前位置
vim可以从一个函数调用跳转到其函数定义(快捷键是CTRL+],上一个CTRL+t)

Visual模式先选中，然后 "ay 复制，"ap 粘贴，a 为寄存器名，可同时使用多个
VIM的书签:m{a-zA-Z}  '{a-zA-Z}  marks

vim 插件管理pathogen的使用
进入.vim/bundle目录
执行git clone git://github.com/scrooloose/nerdtree.git

:help 29.1
折叠------------------------------
set fdm=[foldmethod]可以设置折叠模式
manual        手动建立折叠。
indent          相同缩进距离的行构成折叠。
expr             用表达式来定义折叠，'foldexpr' 给出每行的折叠级别。
marker         标志用于指定折叠。
syntax          语法高亮项目指定折叠。
diff               没有改变的文本构成折叠
:set foldenable进行设置。
zf折叠选择的文字，
zf#j创建光标下#行的折叠，
zf/string创建从当前光标到string的折叠，
zfaB创建当前被B划定的折叠块。
zc关闭当前的折叠，
zo打开当前的折叠，
zM关闭所有的折叠，
zr打开一个水平的折叠，
zR打开所有的折叠，
zj移动到下一个折叠，
zk移动到前一个折叠，
zm关闭一个水平的折叠，
zn关闭折叠功能，
zN重新打开折叠功能。
多窗口---------------------
改变窗口大小
CTRL-W -    使得当前窗口高度减 N (默认值是 1)。 CTRL-W +    使得当前窗口高度加 N (默认值是 1)
CTRL-W <    使得当前窗口宽度减 N (默认值是 1)。 CTRL-W >    使得当前窗口宽度加 N (默认值是 1)
:set nobomb bomb?
:set paste 拷贝模式
:set list 显示不可见字符
set tabstop=4 tab键为4个空格
:g/s*^$/d 删除所有空行
:g!/^dd/d 删除不含字符串'dd'的行
#vim 文件编码
:set fileencoding
#查看文件乱码的问题，~/.vimrc 文件中添加以下内容
set encoding=utf-8 fileencodings=utf-8
#文件编码转换

:set fileencoding=utf-8  查看现在文本的编码
:set fenc=编码   转换当前文本的编码为指定的编码
:set enc=编码     以指定的编码显示文本，但不保存到文件中。
:set fileformat?
:set fileformat=unix



[[[ macport brew ]]]----------------------------------
sudo port -v selfupdate
port list
port info flowd
#删除临时文件
sudo port clean –all vile
#卸载软件
sudo port uninstall name
#查看有更新的软件以及版本
port outdated
#升级可以更新的软件
sudo port upgrade outdated
#start at login
brew services start homebrew/php/php72
#launch php-fpm on startup
 mkdir -p ~/Library/LaunchAgents
 cp /usr/local/opt/php72/homebrew.mxcl.php72.plist ~/Library/LaunchAgents/
 launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php72.plist
control script is located at /usr/local/opt/php72/sbin/php72-fpm

ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys

[[[ sed ]]]
rename s/_l//g *.swf
cp $(find -name "1010*.gif") $([cmd2])
cp $(ls /kkshow/demo/6 | sed 's/.swf/.gif/g') $([cmd2])

sed -i "s/Commands;/Commands\\gdt;/g" `grep "Commands;" -rl ./*`

[[[ netstat ]]]
-a (all)显示所有选项，默认不显示LISTEN相关
-t (tcp)仅显示tcp相关选项
-u (udp)仅显示udp相关选项
-n 拒绝显示别名，能显示数字的全部转化成数字。
-l 仅列出有在 Listen (监听) 的服務状态

-p 显示建立相关链接的程序名
-r 显示路由信息，路由表
-e 显示扩展信息，例如uid等
-s 按各个协议进行统计
-c 每隔一个固定时间，执行该netstat命令。

提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到

[[[ LNMP ]]]
LNMP状态管理命令：

LNMP 1.2+状态管理: lnmp {start|stop|reload|restart|kill|status}
LNMP 1.2+各个程序状态管理: lnmp {nginx|mysql|mariadb|php-fpm|pureftpd} {start|stop|reload|restart|kill|status}
LNMP 1.1状态管理： /root/lnmp {start|stop|reload|restart|kill|status}
Nginx状态管理：/etc/init.d/nginx {start|stop|reload|restart}
MySQL状态管理：/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}
Memcached状态管理：/etc/init.d/memcached {start|stop|restart}
PHP-FPM状态管理：/etc/init.d/php-fpm {start|stop|quit|restart|reload|logrotate}
PureFTPd状态管理： /etc/init.d/pureftpd {start|stop|restart|kill|status}
ProFTPd状态管理： /etc/init.d/proftpd {start|stop|restart|reload}
Redis状态管理： /etc/init.d/redis {start|stop|restart|kill}

如重启LNMP，1.2+输入命令：lnmp restart 即可；单独重启mysql：/etc/init.d/mysql restart 也可以 lnmp mysql restart ，两个是一样的。

[[[ hostname ]]]
1：  hostname DB-Server
--运行后立即生效（新会话生效），但是在系统重启后会丢失所做的修改
2：  echo DB-Server  > /proc/sys/kernel/hostname
--运行后立即生效（新会话生效），但是在系统重启后会丢失所做的修改
3： sysctl kernel.hostname=DB-Server
--运行后立即生效（新会话生效），但是在系统重启后会丢失所做的修改
4: 修改/etc/sysconfig/network下的HOSTNAME变量
--需要重启生效，永久性修改。

[[[ x window ]]]
sudo restart lightdm
sudo service lightdm restart
sudo pkill x

 ls `which crontab` -al
ps aux | grep php-fpm | head -n 1 | awk '{printf "%s" , $2}' | xargs kill
ps -e -o 'pid,comm,args,pcpu,rsz,vsz,stime,user,uid'  其中rsz是是实际内存
pmap -d 14596
pmap $(pgrep php-cgi |head -1)

(select * from Db_sns0.k7_user_sns_count5)  union (select * from Db_sns0.k7_user_sns_count6) union (select * from Db_sns7.k7_user_sns_count5)  union (select * from Db_sns7.k7_user_sns_count6);
UPDATE  `crm_customer` AS c LEFT JOIN  `crm_user` AS u ON u.id = c.sales_d SET c.`sales_d` = ( CASE WHEN u.`id` IS NULL THEN 0 ELSE u.`acl_user_id` END )

ps -A -o stat,ppid,pid,cmd | grep -e '^[Zz]'
find ./ -type f -maxdepth 1 -ok ls -al {} \;
find ./ -type f -maxdepth 1 -exec ls -al {} \;
find . -name "*.log" -exec rm {} \;

lsof[-i:port] uptime pkill killall netstat pstree cksum whatis whereis which  iostat -c -d -x  pidstat vmstat w
setsid traceroute  lsmode nethogs

jmap --heap 

dmesg id

[[[ jar ]]]
jar命令格式：jar {c t x u f }[ v m e 0 M i ][-C 目录]文件名...
其中{ctxu}这四个参数必须选选其一。[v f m e 0 M i ]是可选参数，文件名也是必须的。
-c  创建一个jar包
-t  显示jar中的内容列表
-x  解压jar包
-u  添加文件到jar包中
-f  指定jar包的文件名
  -v  生成详细的报造，并输出至标准设备
  -m  指定manifest.mf文件.(manifest.mf文件中可以对jar包及其中的内容作一些一设置)
  -0  产生jar包时不对其中的内容进行压缩处理
  -M  不产生所有文件的清单文件(Manifest.mf)。这个参数与忽略掉-m参数的设置
  -i  为指定的jar文件创建索引文件
  -C  表示转到相应的目录下执行jar命令,相当于cd到那个目录，然后不带-C执行jar命令

创建带manifest.mf文件的jar包
jar cvfm hello.jar manifest.mf hello
注意：manifest.mf这个文件名，用户可以任指定，但jar命令只认识Manifest.mf，它会对用户指定的文件名进行相应在的转换，这不需用户担心。
Manifest.mf文件编写规则：
(1) 不能有空行和空格的地方
第一行不可以是空行( 第一行的行前不可以有空行)，行与行之间不能有空行，第行的行尾不可以有空格
(2) 一定要有空行的地方
最后一行得是空行(在输完你的内容后加一个回车就OK)
(3) 一定有空格的地方
key: value 在分号后面一定要写写一个空格
Java调用类的顺序：java\lib\ext中的类--->Manifest.mf中指定的类-->当前目录中的类-->set CLASSPATH中指定的类。
JAR包与ZIP包主要区别就是JAR包中多一个META-INF的目录，META-INF目录下有一个manifest.mf文件，我们只要建立好相关的目录一压缩就可以了。 

[[[ tmux ]]]
tmux ls
tmux attach [-t | -d | -r] $n
mux ^z d
Tmux Resurrect:前缀键 + Ctrl-s / 前缀键 + Ctrl-r 
.tmux/resurrect

[[[ nc ]]]
[root@hatest2 tmp]# nc -l 1234 |tar xzvf -
[root@hatest1 ~]# ll -d nginx-0.6.34
drwxr-xr-x 8 1000 1000 4096 12-23 17:25 nginx-0.6.34
[root@hatest1 ~]# tar czvf - nginx-0.6.34|nc 192.168.228.222 1234
nc -lp 1234 > install.log
nc -w 1 192.168.228.222 1234 < install.log

清空yum 缓存，并重建yum缓存，执行以下命令：
yum install epel-release
yum repolist
yum clean all && yum clean metadata && yum clean dbcache && yum makecache && yum update
