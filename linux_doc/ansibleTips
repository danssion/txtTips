[ansible 常用命令]
#主机的一些基本信息
#storm_cluster 配置再host中的主机ip
ansible storm_cluster -m setup
#测试远程主机的运行状态
ansible storm_cluster -m ping
# 设置文件的属性
group：定义文件/目录的属组
mode：定义文件/目录的权限
owner：定义文件/目录的属主
path：必选项，定义文件/目录的路径
recurse：递归设置文件的属性，只对目录有效
src：被链接的源文件路径，只应用于state=link的情况
dest：被链接到的路径，只应用于state=link的情况
state：
       directory：如果目录不存在，就创建目录
       file：即使文件不存在，也不会被创建
       link：创建软链接
       hard：创建硬链接
       touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间
       absent：删除目录、文件或者取消链接文件
ansible storm_cluster -m file -a "src=/etc/resolv.conf dest=/tmp/resolv.conf state=link"

# 复制文件到远程主机
#将本地文件“/etc/ansible/ansible.cfg”复制到远程服务器
ansible storm_cluster -m copy -a "src=/etc/ansible/ansible.cfg dest=/tmp/ansible.cfg owner=root group=root mode=0644"
# 远程文件信息查看
ansible storm_cluster -m command -a "ls -al /tmp/ansible.cfg"

# 在远程主机上执行命令
ansible storm_cluster -m command -a "uptime"

# 切换到某个shell执行指定的指令，参数与command相同此模块可以支持命令管道，同时还有另一个模块也具备此功能：raw
# 将创建的脚本文件分发到远程
ansible storm_cluster -m copy -a "src=/tmp/rocketzhang_test.sh dest=/tmp/rocketzhang_test.sh owner=root group=root mode=0755"
## 远程执行
ansible storm_cluster -m shell -a "/tmp/rocketzhang_test.sh"

ansible '*' -m ping   等同于 #ansible all -m ping

ansible -i hostsNew.iapi all -m command -a "supervisorctl restart php-fpm" 
ansible -i hosts.php all  -m command -a "ls -alh"

[ansible-playbook]
#####基础组件
Hosts：运行执行任务（task）的目标主机
remote_user：在远程主机上执行任务的用户
tasks：任务列表
handlers：任务，与tasks不同的是只有在接受到通知时才会被触发
templates：使用模板语言的文本文件，使用jinja2语法。
variables：变量，变量替换{{ variable_name }}

###variable 
#变量定义在资产（inventory）中
[websers:vars]  
ntp_server=ntp.exampl.com
proxy=proxy.exampl.com

#定义在playbook中
- hosts: webservers
  vars:
    http_port: 80
#facts变量
facts变量是由setup模块获取远程主机的信息。
用法：
ansible 192.168.200.136 -m setup

#ansible-playbook 命令中传入参数
#使用 -e选项传入参数
ansible-playbook 192.168.200.136 -e "httpd_port=8080" httpd04.yml

#变量的引用
{{ var_name }}


##templates
#是一个模块功能，与copy不同的是他的文本文件采用了jinga2语法 注意：template只能在palybook中使用
#jinga2基本语法如下
字面量：
  字符串：使用单引号或双引号
  数字：整型，浮点数
  列表：{item1，item2，...}
  字典：{key1:value1,key2:value2,...}
  布尔型:true/false
算术运算:
  +,-,*,/,//,%,**
比较运算：
  ==,!=,>,>=,<,<=
逻辑运算：
  and，or，not

##tasks
#执行的模块命令
格式：
  action：模块参数（此种方式只在较新的版本中出现）
  module：参数(已键值对的形式出现)

每一个task都有一个名称，用于标记此任务。任务示例：
  name: install httpd
  yum: name=httpd state=present

#Handlers介绍
#也是一些task的列表，和一般的task并没有什么区别
#不管有多少个通知者进行了notify，等到play中的所有task执行完成之后，handlers也只会被执行一次


#引用变量
#使用：vars: 添加变量
vars:
	package: httpd
	service: httpd
#直接引用Ansible变量
{{ansible_all_ipv4_addresses}}

#引用主机变量
#在组的主机后面添加变量
[hosts]
172.16.6.84 hostname=iapi1 newrelic_appname="Internal"
172.16.6.85 hostname=iapi2

#条件判断
#when的值是一个条件表达式，如果条件判断成立，这个task就执行，如果判断不成立，则task不执行
  name: download newrelic php agent
  unarchive: src=https://download.newrelic.com/php_agent/release/newrelic-php5-8.5.0.235-linux.tar.gz dest=/tmp/ remote_src=yes
  when: newrelic_appname is defined


#Roles
#基于一个已知的文件结构，去自动的加载某些 vars_files，tasks 以及 handlers
#一个项目的结构如下:
site.yml
webservers.yml
fooservers.yml
roles/
   common/
     files/
     templates/
     tasks/
     handlers/
     vars/
     defaults/
     meta/
   webservers/
     files/
     templates/
     tasks/
     handlers/
     vars/
     defaults/
     meta/

#执行命令
#wfq@ubuntu:~/playbook$ cat shell_demo.yml 
---
hosts: asb
tasks:
 - name: "demo shell"
   shell: echo helloworld I love ansible > /home/wfq/playbook/pb.log

#####playbook调用方式

ansible-playbook <filename.yml> ... [options]

  <filename.yml>:yaml格式的playbook文件路径，必须指明
  [options]: 选项
    -C, --check：并不在远程主机上执行，只是测试。
    -i PATH, --inventory=PATH：资产的文件路径
    --flush-cache：清楚fact缓存
    --list-hosts：列出匹配的远程主机，并不执行任何动作
    -t, TAGS, --tags=TAGS：运行指定的标签任务
    --skip-tags:跳过指定的notify，后面详细介绍。

ansible-playbook jdk.yml -l 192.168.121.129
ansible-playbook -i hosts.java java.yml









